{"version":3,"sources":["webpack:///../packages/web-app/dev-env.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"mcAMO,IAAMA,EAAe,Q,6KAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,qBADR,qBAGA,iCACA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,gBADZ,wCAIL,qCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,4RAML,gCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,gCAIL,iHAEA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,kXAML,qFACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,gG,oKAUTJ,EAAWK,gBAAiB","file":"component---packages-web-app-dev-env-mdx-231960257ad0c740a545.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/vasilis/BeDeve/fullstack-development/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2 {...{\n      \"id\": \"required-software\"\n    }}>{`Required software`}</h2>\n    <p>{`Chromium`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`sudo apt install chromium-browser\n`}</code></pre>\n    <p>{`Node and npm`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash\nexport NVM_DIR=\"$([ -z \"\\${XDG_CONFIG_HOME-}\" ] && printf %s \"\\${HOME}/.nvm\" || printf %s \"\\${XDG_CONFIG_HOME}/nvm\")\" [ -s \"$NVM_DIR/nvm.sh\" ] && \\\\. \"$NVM_DIR/nvm.sh\" # This loads nvm\nnvm install 8\n`}</code></pre>\n    <p>{`Keepass`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`sudo apt install keepassx\n`}</code></pre>\n    <p>{`VsCode\nThe repository and key can also be installed manually with the following script:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg\nsudo install -o root -g root -m 644 packages.microsoft.gpg /usr/share/keyrings/\nsudo sh -c 'echo \"deb [arch=amd64 signed-by=/usr/share/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/vscode stable main\" > /etc/apt/sources.list.d/vscode.list'\n`}</code></pre>\n    <p>{`Then update the package cache and install the package using:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`sudo apt-get install apt-transport-https\nsudo apt-get update\nsudo apt-get install code\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}